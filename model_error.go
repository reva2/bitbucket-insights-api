/*
 * BitBucket Server Code Insights API
 *
 * BitBucket Server Code Insights API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insights

import (
	"encoding/json"
)

// Error struct for Error
type Error struct {
	// The context attribute indicates which parameter or request entity attribute failed validation. Note that the context may be null.
	Context NullableString `json:"context"`
	// Error description
	Message       string         `json:"message"`
	ExceptionName NullableString `json:"exceptionName"`
}

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError(context NullableString, message string, exceptionName NullableString) *Error {
	this := Error{}
	this.Context = context
	this.Message = message
	this.ExceptionName = exceptionName
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetContext returns the Context field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Error) GetContext() string {
	if o == nil || o.Context.Get() == nil {
		var ret string
		return ret
	}

	return *o.Context.Get()
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Error) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Context.Get(), o.Context.IsSet()
}

// SetContext sets field value
func (o *Error) SetContext(v string) {
	o.Context.Set(&v)
}

// GetMessage returns the Message field value
func (o *Error) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Error) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Error) SetMessage(v string) {
	o.Message = v
}

// GetExceptionName returns the ExceptionName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Error) GetExceptionName() string {
	if o == nil || o.ExceptionName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ExceptionName.Get()
}

// GetExceptionNameOk returns a tuple with the ExceptionName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Error) GetExceptionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExceptionName.Get(), o.ExceptionName.IsSet()
}

// SetExceptionName sets field value
func (o *Error) SetExceptionName(v string) {
	o.ExceptionName.Set(&v)
}

func (o Error) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["context"] = o.Context.Get()
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["exceptionName"] = o.ExceptionName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
